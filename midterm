
#include <opencv2/imgcodecs.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/imgproc.hpp>

#include <opencv2/face.hpp>

#include <stdlib.h>
#include <iostream>
#include <stdio.h>
#include <ctime>
#include <vector>

using namespace cv;
using namespace std;
using namespace cv::face;



#define COLOR Scalar(255, 200,0)


int main(int argc, char* argv[]) {

    // faial-landmark
#if 1
    /////////////////////// 0. Load models 

    //// 0-1. Load Face Detector : Haar
//    CascadeClassifier faceDetector("C:/extra/opencv/build/install/etc/haarcascades/haarcascade_frontalface_alt2.xml");
    CascadeClassifier faceDetector("./inputDataFiles/haarcascades/haarcascade_frontalface_alt2.xml");

    //// 0-2. Load LBF face landmark detector
    // Create an instance of Facemark
    Ptr<Facemark> facemark = FacemarkLBF::create();

    // Load landmark detector
//    facemark->loadModel("C:/extra/opencv/build/install/etc/lbfmodel/lbfmodel.yaml");
    facemark->loadModel("./inputDataFiles/lbfmodel/lbfmodel.yaml");



    /////////////////////// 1. Webcam setting
    // Set up webcam for video capture
    VideoCapture cam(0);

    // Variable to store a video frame and its grayscale
    Mat frame, gray;



    /////////////////////// 2. Algorithm starts
    // Read a frame
    while (cam.read(frame))
    {
        clock_t start = clock(); //시간측정

        vector<Rect> faces;  // Haar용 face vector

        ///////////////////////////// 2-1. Haar Detector execution
        // Find face
        // Convert frame to grayscale because
        // faceDetector requires grayscale image.

        // convert captured frame to gray scale & equalize
        cvtColor(frame, gray, COLOR_BGR2GRAY);
        equalizeHist(gray, gray);
        // -------------------------------------------------------------

        // Haar detector main function
        faceDetector.detectMultiScale(gray, faces,
            1.1, // increase search scale by 10% each pass
            3,   // merge groups of three detections
//                    CV_HAAR_FIND_BIGGEST_OBJECT | CV_HAAR_SCALE_IMAGE,
CASCADE_FIND_BIGGEST_OBJECT | CASCADE_SCALE_IMAGE, Size(30, 30) // 최소 사이즈 측정
);

        std::cout << "number of faces: " << faces.size() << endl;

        clock_t end = clock();
        cout << "Face Detection running time : \n";
        cout << (double)(end - start) / CLOCKS_PER_SEC << " 초\n";

        // draw the results
        for (int i = 0; i < faces.size(); i++) {
            Point lb(faces[i].x + faces[i].width, faces[i].y + faces[i].height);
            Point tr(faces[i].x, faces[i].y);

            rectangle(frame, lb, tr, Scalar(255, 0, 0), 3, 4, 0);
        }


        ///////////////////////////// 2-2. LBF landmark 
        // Variable for landmarks.
        // Landmarks for one face is a vector of points
        // There can be more than one face in the image. Hence, we use a vector of vector of points.
        start = clock(); //시간측정

        vector< vector<Point2f> > landmarks;

        // Run landmark detector
        bool success = facemark->fit(frame, faces, landmarks); // faces bbox is from Haar detecotr

        if (success)
        {
            // If successful, render the landmarks on the face
            for (int i = 0; i < landmarks.size(); i++)
            {
                for (int j = 0; j < landmarks[i].size(); j++)
                {
                    // draw the landamrk points (circle)
                    circle(frame, landmarks[i][j], 3, COLOR, FILLED);
                }

            }
        }

        end = clock();
        cout << "Face Landmark points running time : \n";
        cout << (double)(end - start) / CLOCKS_PER_SEC << " 초\n";
        cout << "============================================\n";

        // Display results
        cv::imshow("Facial Landmark Detection", frame);
        // Exit loop if ESC is pressedf
        if (waitKey(1) == 27) break;
    }
#endif  



    std::cout << "\n" << endl;

    return 0;
}


